Differential gene expression analysis of Aged vs. Young HSCe

# Performed differential analysis using DESeq2 and counts generated by QoRTs (see ‘RNASeqPipeline_HSCe.py’)
# Have 10 young and 10 aged (Old) samples
# Will use the counts that do not contain ERCC spike-ins
# Prelim QC suggest that there is a bit of a batch effect and an effect of sex on differential gene expression ——> design needs to include batch and sex, testing for differences between age

> sessionInfo()
R version 3.2.1 (2015-06-18)
Platform: x86_64-unknown-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux Server release 6.10 (Santiago)

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] grid      stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] circlize_0.4.3        ComplexHeatmap_1.15.1

loaded via a namespace (and not attached):
 [1] nlme_3.1-131               bit64_0.9-7               
 [3] RColorBrewer_1.1-2         prabclus_2.2-6            
 [5] GenomeInfoDb_1.6.3         tools_3.2.1               
 [7] backports_1.1.2            rpart_4.1-12              
 [9] Hmisc_4.1-1                DBI_0.7                   
[11] lazyeval_0.2.1             BiocGenerics_0.17.2       
[13] colorspace_1.3-2           trimcluster_0.1-2         
[15] nnet_7.3-12                GetoptLong_0.1.6          
[17] gridExtra_2.3              DESeq2_1.10.1             
[19] bit_1.1-12                 Biobase_2.30.0            
[21] htmlTable_1.11.1           diptest_0.75-7            
[23] scales_0.5.0               checkmate_1.8.5           
[25] DEoptimR_1.0-8             mvtnorm_1.0-7             
[27] robustbase_0.92-8          genefilter_1.52.1         
[29] stringr_1.2.0              digest_0.6.13             
[31] foreign_0.8-69             minqa_1.2.4               
[33] XVector_0.10.0             base64enc_0.1-3           
[35] htmltools_0.3.6            lme4_1.1-15               
[37] htmlwidgets_0.9            rlang_0.1.6               
[39] GlobalOptions_0.0.12       rstudioapi_0.7            
[41] RSQLite_2.0                shape_1.4.3               
[43] mclust_5.4                 BiocParallel_1.4.3        
[45] acepack_1.4.1              dendextend_1.6.0          
[47] magrittr_1.5               modeltools_0.2-21         
[49] Formula_1.2-2              futile.logger_1.4.3       
[51] Matrix_1.2-12              Rcpp_0.12.14              
[53] munsell_0.4.3              S4Vectors_0.8.11          
[55] viridis_0.4.1              stringi_1.1.6             
[57] whisker_0.3-2              MASS_7.3-48               
[59] SummarizedExperiment_1.0.2 zlibbioc_1.16.0           
[61] flexmix_2.3-14             plyr_1.8.4                
[63] blob_1.1.0                 parallel_3.2.1            
[65] lattice_0.20-35            splines_3.2.1             
[67] annotate_1.48.0            locfit_1.5-9.1            
[69] knitr_1.18                 pillar_1.1.0              
[71] GenomicRanges_1.22.4       rjson_0.2.15              
[73] fpc_2.1-11                 geneplotter_1.48.0        
[75] stats4_3.2.1               futile.options_1.0.0      
[77] XML_3.98-1.9               RcppArmadillo_0.6.600.4.0 
[79] latticeExtra_0.6-28        lambda.r_1.2              
[81] data.table_1.10.4-3        nloptr_1.0.4              
[83] gtable_0.2.0               kernlab_0.9-25            
[85] ggplot2_2.2.1              xtable_1.8-2              
[87] class_7.3-14               survival_2.41-3           
[89] viridisLite_0.3.0          tibble_1.4.1              
[91] AnnotationDbi_1.32.3       memoise_1.1.0             
[93] IRanges_2.4.8              cluster_2.0.6             




I) Generate DESeq2 data object


A) Specify directory that contains counts:

> directory= "pathToCounts/"


B) Read in counts

> sampleFiles=grep('*.txt', list.files(directory), value=TRUE)
> sampleFiles
 [1] "Sample_56677.txt" "Sample_56678.txt" "Sample_56682.txt" "Sample_56683.txt"
 [5] "Sample_56996.txt" "Sample_56997.txt" "Sample_57000.txt" "Sample_57001.txt"
 [9] "Sample_57002.txt" "Sample_57003.txt" "Sample_57004.txt" "Sample_57005.txt"
[13] "Sample_57008.txt" "Sample_57009.txt" "Sample_57010.txt" "Sample_69596.txt"
[17] "Sample_69597.txt" "Sample_69598.txt" "Sample_69599.txt" "Sample_69600.txt"

C) Read in table that contains sample information:

> sampleInfo=read.table("SamplesForDESeq2.txt", sep="\t", header=T, stringsAsFactors=F)

> sampleInfo
   Donor.ID  Sample DonorAge Sex SeqID Description Age.Group Batch
1   Young_1 ABM5619       18   M 56677     ABM5619     Young   one
2  Young_12 ABM5036       25   M 56678     ABM5036     Young   one
3    Old_23 14-1240       72   F 56682     14-1240       Old   one
4    Old_32  15-766       75   F 56683      15-766       Old   one
5  Young_16   S5005       27   F 56996      S50005     Young   two
6  Young_25  BMD632       NQ   M 56997        B632     Young   two
7    Old_11  15-795       67   F 57000      15-795       Old   two
8    Old_28  16-041       74   F 57001      16-041       Old   two
9    Old_21  14-806       71   M 57002      14-806       Old   two
10   Old_22 15-1553       71   F 57003     15-1553       Old   two
11   Old_18  16-076       70   F 57004      16-076       Old   two
12  Young_6 ABM4891       22   M 57005       A4891     Young   two
13  Young_9   H3406       22   M 57008       H3406     Young   two
14 Young_17   S0589       28   M 57009       S0589     Young   two
15  Young_4   S1030       21   F 57010       S1030     Young   two
16   Old_19  16-143       70   F 69596      16-143       Old three
17    Old_4  16-280       65   F 69597      16-280       Old three
18  Young_5   A4823       22   M 69598       A4823     Young three
19  Young_7   H0324       22   F 69599       H0324     Young three
20   Old_25  16-120       75   F 69600      16-120       Old three

D) Generate sample table with parameters of interest for DESeq2

> sampleTable=data.frame(sampleName=sampleInfo[, "Donor.ID"], fileName=sampleFiles, condition=sampleInfo[, "Age.Group"], batch=sampleInfo[, "Batch"], sex=sampleInfo[, "Sex"])

> sampleTable
   sampleName         fileName condition batch sex
1     Young_1 Sample_56677.txt     Young   one   M
2    Young_12 Sample_56678.txt     Young   one   M
3      Old_23 Sample_56682.txt       Old   one   F
4      Old_32 Sample_56683.txt       Old   one   F
5    Young_16 Sample_56996.txt     Young   two   F
6    Young_25 Sample_56997.txt     Young   two  NQ
7      Old_11 Sample_57000.txt       Old   two   F
8      Old_28 Sample_57001.txt       Old   two   F
9      Old_21 Sample_57002.txt       Old   two   M
10     Old_22 Sample_57003.txt       Old   two   F
11     Old_18 Sample_57004.txt       Old   two   F
12    Young_6 Sample_57005.txt     Young   two   M
13    Young_9 Sample_57008.txt     Young   two   M
14   Young_17 Sample_57009.txt     Young   two   M
15    Young_4 Sample_57010.txt     Young   two   F
16     Old_19 Sample_69596.txt       Old three   F
17      Old_4 Sample_69597.txt       Old three   F
18    Young_5 Sample_69598.txt     Young three   M
19    Young_7 Sample_69599.txt     Young three   F
20     Old_25 Sample_69600.txt       Old three   F


E) Relevel table so as to compare Aged/Young:

> sampleTable$condition=relevel(sampleTable$condition, "Young")


F) Make DESeq2 data object
# Will measure condition (i.e. Age) while controlling for batch and sex

> ddsHTSeq<-DESeqDataSetFromHTSeqCount(sampleTable= sampleTable, directory=directory, design=~batch + sex + condition)



II) Differential Analysis

A) Run DESeq using Wald test and default dispersions

> dds <- DESeq(ddsHTSeq)

B) Get all results
# Note that in this version of DESeq2 (DESeq2_1.10.1) shrinkage of the log2FC is included by default

> res_OY=results(dds)

C) Extract significant results

> OY_sig=as.data.frame(na.omit(res_OY))
> OY_sig=OY_sig[which(OY_sig$padj<0.05 & abs(OY_sig$log2FoldChange) >0.585), ]
> OY_sig$Ensembl=rownames(OY_sig)

D) Annotate gene symbol

> En_to_GeneSym=read.table("/path/gencode.v19.chr_patch_hapl_scaff_GeneID2Symbol", sep="\t")
> colnames(En_to_GeneSym)=c("ID", "GeneSym")


> OY_ann=cbind(as.data.frame(rownames(OY_sig)), OY_sig)
> OY_ann=merge(En_to_GeneSym, OY_ann, by.x="ID", by.y="rownames(OY_sig)")



III) Plot Heatmap using ComplexHeatmap


> library(ComplexHeatmap)
> library(circlize)


A) Generate regularized log counts using DESeq2

> rld_=rlog(dds)

Make into data.frame:
> rld_counts=as.data.frame(assay(rld))


B) Extract rld counts of significant genes

> OY_sig_counts=rld_counts[rownames(rld_counts) %in% rownames(OY_sig),]

C) Annotate counts for significant genes

> OY_sig_counts_ann=OY_sig_counts
> OY_sig_counts_ann$Ensembl=rownames(OY_sig_counts_ann)
> OY_sig_counts_ann=merge(En_to_GeneSym, OY_sig_counts_ann, by.x="ID", by.y="Ensembl")


D) Make sigcounts into matrix:
> OY_sig_counts_mat=as.matrix(OY_sig_counts_ann[,3:22])

Use genename as rowname:
> rownames(OY_sig_counts_mat)=OY_sig_counts_ann$GeneSym

E) Find row-z-scores

>  OY_sig_counts_mat=t(scale(t(OY_sig_counts_mat)))

F) Make functions for distance and average clustering

> distCor <- function(x) as.dist(1-cor(t(x)))
> hclustAvg <- function(x) hclust(x, method="average")


G) Make Heatmap, use average clustering and correlation distance

#Cluster_rows=TRUE
#cluster distance=distance correlation 
#Cluster method=average


> myHeatmap= Heatmap(OY_sig_counts_mat, show_row_names = FALSE, show_row_dend = FALSE, show_column_dend = TRUE, column_dend_height = unit(3, "cm"), cluster_rows=TRUE, cluster_columns=TRUE, clustering_distance_rows=distCor, clustering_method_rows="average",col=colorRamp2(seq(min(OY_sig_counts_mat), max(OY_sig_counts_mat), length=3), c("blue", "#EEEEEE", "red")), clustering_method_col="average", clustering_distance_col=distCor)

H) Extracting column dendrogram, so can plot in reverse (young on left)

> col_dend=column_dend(myHeatmap)
> col_dendrev=rev(col_dend)


I) Plot final heatmap

> ha_column=HeatmapAnnotation(df=data.frame(Age=sampleInfo[, "Age.Group"]), col=list(Age=c("Young"="steelblue", "Old"="indianred")), height = unit(1, "cm"), show_legend = 

> Heatmap(OY_sig_counts_mat, show_row_names = FALSE, show_row_dend = T, show_column_dend = TRUE, column_dend_height = unit(1.5, "cm"), cluster_rows=TRUE, clustering_distance_rows=distCor, clustering_method_rows="average", row_dend_width = unit(3.0, "cm"), col=colorRamp2(seq(min(OY_sig_counts_mat), max(OY_sig_counts_mat), length=3), c("blue", "#EEEEEE", "red")), cluster_columns=col_dendrev, column_dend_reorder=FALSE, heatmap_legend_param = list(color_bar = "continuous", legend_direction = "horizontal", legend_width=unit(5, "cm")), top_annotation=ha_column, show_column_names = FALSE)


